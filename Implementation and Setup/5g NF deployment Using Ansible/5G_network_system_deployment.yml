
---
-   hosts: 127.0.0.1
    connection: local
    become: yes
    remote_user: root
    vars:
        web_application_access_port: '5000'
        init_free5gc_elements_simulation: 'true'
        start_webapp: 'true'
        deploy_oaisim: 'true'
        deploy_free5gc: 'true'
        force_docker_reinstall: 'false'
        init_enb: 'true'
        init_ue: 'true'
        num_ues_init_simulation: '3'
        docker_custom_subnet_network: '192.172.2.0/24'
        docker_custom_network_name: '5g_Dep'
        BASE_DIR_INSTALL: '/root/oaisim-free5g-install'
        ip_address_AMF: '192.172.2.2'
        ip_address_SMF: '192.172.2.3'
        ip_address_HSS: '192.172.2.4'
        ip_address_PCRF: '192.172.2.5'
        ip_address_UPF: '192.172.2.6'
        ip_address_MONGO_DB: '192.172.2.100'
        ip_address_WEB_UI: '192.172.2.101'
        ip_address_OAISIM_ENB: '192.172.2.253'
        ip_address_OAISIM_UE: '192.172.2.254'
        free5gc_st1_image_name: 'laboraufg/free5gc-st1'
        free5gc_webui_image_name: 'laboraufg/webui-free5gc'
        free5gc_mongodb_image_name: 'laboraufg/mongodb-free5gc'
        oaisim_enb_image_name: 'laboraufg/enb-openairsim'
        oaisim_ue_image_name: 'laboraufg/ue-openairsim'
        UE_container_name: 'ue'
        UE_folder_name_container_name: '/root/ue/'
        ENB_folder_name_container_name: '/root/enb/'
        ENB_container_name: 'enb'
        AMF_container_name: 'amf'
        UPF_container_name: 'upf'
        SMF_container_name: 'smf'
        HSS_container_name: 'hss'
        PCRF_container_name: 'pcrf'
        MONGO_DB_container_name: 'mongodb-svc'
        WEB_UI_container_name: 'webui'
        clear_file_instalation: 'true'
        HPLMN : "30234"
        default_username_WEBUI : "admin"
        default_password_WEBUI : "1423"
        enb_gumei_mcc_auth_param: '302'
        enb_gumei_mnc_auth_param: '34'
        log_level_tracer_free5gc: '5'
        path_workspace_free5gc: '/root/free5gc-stage-1'
        USIM_API_K : "8baf473f2f8fd09487cccbd7097c6862"
        OPC : "e734f8734007d6c5ce7a0508809e7e9c"
        user_equiments:
            - { ue_id: UE0 ,   msin: '0000000001' }
            - { ue_id: UE1 ,   msin: '0000000002' }
            - { ue_id: UE2 ,   msin: '0000000003' }
    tasks:
        - name: Environment validation!
          assert:
            that:
              - ansible_memtotal_mb >= 3500
            msg: "Minimum memory requirements in the deployment environment is 4GB! Operation failed!"

        - fail: 
            msg: "'USIM_API_K' value cannot be different of of 8baf473f2f8fd09487cccbd7097c6862"
          when: USIM_API_K != '8baf473f2f8fd09487cccbd7097c6862'

        - fail: 
            msg: "It's not possible INIT_UE whitout INIT_ENB, plese set init_enb='true' and try again!"
          when: init_ue == 'true'  and init_enb == 'false'

        - fail: 
            msg: "'OPC' value cannot be different of of e734f8734007d6c5ce7a0508809e7e9c"
          when: OPC != 'e734f8734007d6c5ce7a0508809e7e9c'

        - fail: 
            msg: "'HPLMN' value cannot be different of of 30234"
          when: HPLMN != '30234'

        - fail: 
            msg: "'internet_network_interface' not found, this parameter is required!"
          when: internet_network_interface == ''
          
        - name  : Remove old instalation
          shell :  |
                sudo rm -rf {{ BASE_DIR_INSTALL }}
                
        - name  : Remove docker installation
          shell :  |
                sudo apt autoremove -y --purge docker-engine docker docker.io docker-ce 
                sudo apt update
          when: force_docker_reinstall == 'true'
        
        - name  : Install Basic requirements
          apt   :
                name: ['openssh-client', 'net-tools', 'apt-transport-https', 'ca-certificates', 'curl', 'gnupg2', 'software-properties-common', 'python-setuptools', 'python3-pip']
                state: present
                update_cache: yes
                
        - name  : Create dir instalation
          shell :  |
                mkdir {{ BASE_DIR_INSTALL }}
        
        - name  : Build iptables_upf.sh file
          copy  :
            dest: "{{ BASE_DIR_INSTALL }}/iptables_upf.sh"
            content: |
                #!/bin/bash

                iptables -C FORWARD -i uptun -o eth0 -j ACCEPT
                output=$?
                if [ $output -eq 1 ]; then
                    echo "Masquerade..."
                    iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
                    echo "Conntrack..."
                    iptables -A FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
                    echo "Uptun..."
                    iptables -A FORWARD -i uptun -o eth0 -j ACCEPT
                fi
          when  : deploy_free5gc == 'true'

        - name  : Build setup_upf.sh file
          copy  :
            dest: "{{ BASE_DIR_INSTALL }}/setup_upf.sh"
            content: |
                #!/bin/sh

                if ! grep "uptun" /proc/net/dev > /dev/null; then
                    ip tuntap add name uptun mode tun
                fi
                ip addr del 45.45.0.1/16 dev uptun 2> /dev/null
                ip addr add 45.45.0.1/16 dev uptun
                ip addr del cafe::1/64 dev uptun 2> /dev/null
                ip addr add cafe::1/64 dev uptun
                ip link set uptun up
          when  : deploy_free5gc == 'true'

        - name  : Core Network Configuration - Build free5gc.conf
          copy:
            dest: "{{ BASE_DIR_INSTALL }}/free5gc.conf"
            content: |
              db_uri: mongodb://mongodb-svc/free5gc
              logger:
                  file: {{ path_workspace_free5gc }}/install/var/log/free5gc/free5gc.log
                  trace: 
                      app: {{ log_level_tracer_free5gc }}
                      s1ap: {{ log_level_tracer_free5gc }}
                      nas: {{ log_level_tracer_free5gc }}
                      diameter: {{ log_level_tracer_free5gc }}
                      gtp: {{ log_level_tracer_free5gc }}
                      pfcp: {{ log_level_tracer_free5gc }}
                      sbi: {{ log_level_tracer_free5gc }}
              
              parameter:
                  no_ipv6: true
              amf:
                  freeDiameter: amf.conf
              
                  s1ap:
                    addr: {{ ip_address_AMF }}
              
                  gummei: 
                    plmn_id:
                      mcc: {{ enb_gumei_mcc_auth_param }}
                      mnc: {{ enb_gumei_mnc_auth_param }}
                    mme_gid: 1
                    mme_code: 1
              
                  tai:
                    plmn_id:
                      mcc: {{ enb_gumei_mcc_auth_param }}
                      mnc: {{ enb_gumei_mnc_auth_param }}
                    tac: 1
                  security:
                      integrity_order : [ EIA1, EIA2, EIA0 ]
                      ciphering_order : [ EEA0, EEA1, EEA2 ]
              
                  network_name:
                      full: free5GC
              hss:
                  freeDiameter: hss.conf
              pcrf:
                  freeDiameter: pcrf.conf
              smf:
                  freeDiameter: smf.conf
                  pfcp:
                    - addr: {{ ip_address_SMF }}
                  upf:
                    - addr: {{ ip_address_UPF }}
                  http:
                    addr: {{ ip_address_SMF }}
                    port: 8080
              
                  ue_pool:
                    - addr: 45.45.0.1/16
              
                  dns:
                    - 8.8.8.8
                    - 8.8.4.4
              upf:
                  pfcp:
                    addr:
                      - {{ ip_address_UPF }}
              
                  gtpu:
                    - addr: {{ ip_address_UPF }}
                  ue_pool:
                    - addr: 45.45.0.1/16
                  dns:
                    - 8.8.8.8
                    - 8.8.4.4
          when  : deploy_free5gc == 'true'

        - name  : Core Network Configuration - Build amf.conf
          copy:
            dest: "{{ BASE_DIR_INSTALL }}/amf.conf"
            content: |
              Identity = "amf.localdomain";
              Realm = "localdomain";
              No_SCTP;
              ListenOn = "{{ ip_address_AMF }}";
              TLS_Cred = "{{ path_workspace_free5gc }}/install/etc/free5gc/freeDiameter/amf.cert.pem", "{{ path_workspace_free5gc }}/install/etc/free5gc/freeDiameter/amf.key.pem";
              TLS_CA = "{{ path_workspace_free5gc }}/install/etc/free5gc/freeDiameter/cacert.pem";
              LoadExtension = "dbg_msg_dumps.so" : "0x8888";
              LoadExtension = "dict_rfc5777.so";
              LoadExtension = "dict_mip6i.so";
              LoadExtension = "dict_nasreq.so";
              LoadExtension = "dict_nas_mipv6.so";
              LoadExtension = "dict_dcca.so";
              LoadExtension = "dict_dcca_3gpp.so";
              LoadExtension = "dict_s6a.so";
              ConnectPeer = "hss.localdomain" { ConnectTo = "{{ ip_address_HSS }}"; No_TLS; };
          when  : deploy_free5gc == 'true'

        - name  : Core Network Configuration - Build smf.conf
          copy:
            dest: "{{ BASE_DIR_INSTALL }}/smf.conf"
            content: |
              Identity = "smf.localdomain";
              Realm = "localdomain";
              No_SCTP;
              ListenOn = "{{ ip_address_SMF }}";
              TLS_Cred = "{{ path_workspace_free5gc }}/install/etc/free5gc/freeDiameter/smf.cert.pem", "{{ path_workspace_free5gc }}/install/etc/free5gc/freeDiameter/smf.key.pem";
              TLS_CA = "{{ path_workspace_free5gc }}/install/etc/free5gc/freeDiameter/cacert.pem";
              LoadExtension = "dbg_msg_dumps.so" : "0x8888";
              LoadExtension = "dict_rfc5777.so";
              LoadExtension = "dict_mip6i.so";
              LoadExtension = "dict_nasreq.so";
              LoadExtension = "dict_nas_mipv6.so";
              LoadExtension = "dict_dcca.so";
              LoadExtension = "dict_dcca_3gpp.so";
              ConnectPeer = "pcrf.localdomain" { ConnectTo = "{{ ip_address_PCRF }}"; No_TLS; };
          when  : deploy_free5gc == 'true'

        - name  : Core Network Configuration - Build hss.conf
          copy:
            dest: "{{ BASE_DIR_INSTALL }}/hss.conf"
            content: |
                Identity = "hss.localdomain";
                Realm = "localdomain";
                No_SCTP;
                ListenOn = "{{ ip_address_HSS }}";
                TLS_Cred = "{{ path_workspace_free5gc }}/install/etc/free5gc/freeDiameter/hss.cert.pem", "{{ path_workspace_free5gc }}/install/etc/free5gc/freeDiameter/hss.key.pem";
                TLS_CA = "{{ path_workspace_free5gc }}/install/etc/free5gc/freeDiameter/cacert.pem";
                
                LoadExtension = "dbg_msg_dumps.so" : "0x8888";
                LoadExtension = "dict_rfc5777.so";
                LoadExtension = "dict_mip6i.so";
                LoadExtension = "dict_nasreq.so";
                LoadExtension = "dict_nas_mipv6.so";
                LoadExtension = "dict_dcca.so";
                LoadExtension = "dict_dcca_3gpp.so";
                LoadExtension = "dict_s6a.so";
                ConnectPeer = "amf.localdomain" { ConnectTo = "{{ ip_address_AMF }}"; No_TLS; };
          when  : deploy_free5gc == 'true'

- name  : Core Network Configuration - Build pcrf.conf
          copy:
            dest: "{{ BASE_DIR_INSTALL }}/pcrf.conf"
            content: |
                Identity = "pcrf.localdomain";
                Realm = "localdomain";
                No_SCTP;
                ListenOn = "{{ ip_address_PCRF }}";
                TLS_Cred = "{{ path_workspace_free5gc }}/install/etc/free5gc/freeDiameter/pcrf.cert.pem", "{{ path_workspace_free5gc }}/install/etc/free5gc/freeDiameter/pcrf.key.pem";
                TLS_CA = "{{ path_workspace_free5gc }}/install/etc/free5gc/freeDiameter/cacert.pem";
                LoadExtension = "dbg_msg_dumps.so" : "0x8888";
                LoadExtension = "dict_rfc5777.so";
                LoadExtension = "dict_mip6i.so";
                LoadExtension = "dict_nasreq.so";
                LoadExtension = "dict_nas_mipv6.so";
                LoadExtension = "dict_dcca.so";
                LoadExtension = "dict_dcca_3gpp.so";
                ConnectPeer = "smf.localdomain" { ConnectTo = "{{ ip_address_SMF }}"; No_TLS; };
          when  : deploy_free5gc == 'true'

        - name  : Add Docker GPG key into apt
          apt_key: url=https://download.docker.com/linux/ubuntu/gpg

        - name  : Add Docker APT repository
          apt_repository:
            repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ansible_distribution_release}} edge

        - name  : Update APT
          shell :  |
                sudo apt update

        - name  : Install Docker - CE
          apt:
            name: ['docker-ce', 'docker-ce-cli', 'containerd.io']
            state: present
            update_cache: yes

        - name  : Stop UE container - If exists
          ignore_errors: true
          shell:  |
                docker stop -t 1 {{ UE_container_name }}

        - name  : Stop ENB container - If exists
          ignore_errors: true
          shell:  |
                docker stop -t 1 {{ ENB_container_name }}

        - name  : Stop PCRF container - If exists
          ignore_errors: true
          shell:  |
                docker stop -t 1 {{ PCRF_container_name }}

        - name  : Stop HSS container - If exists
          ignore_errors: true
          shell:  |
                docker stop -t 1 {{ HSS_container_name }}

        - name  : Stop SMF container - If exists
          ignore_errors: true
          shell:  |
                docker stop -t 1 {{ SMF_container_name }}

        - name  : Stop UPF container - If exists
          ignore_errors: true
          shell:  |
                docker stop -t 1 {{ UPF_container_name }}

        - name  : Stop AMF container - If exists
          ignore_errors: true
          shell:  |
                docker stop -t 1 {{ AMF_container_name }}

        - name  : Stop WEBUE container - If exists
          ignore_errors: true
          shell:  |
                docker stop {{ WEB_UI_container_name }}

        - name  : Stop MONGODB container - If exists
          ignore_errors: true
          shell:  |
                docker stop {{ MONGO_DB_container_name }}

        - name  : Run doker prune in stoped containers
          ignore_errors: true
          shell:  |
                docker container prune -f

        - name  : Remove free5gc-st1 image
          ignore_errors: true
          shell:  |
                docker image rm {{ free5gc_st1_image_name }}
          when: force_docker_reinstall == 'true'

        - name  : Remove free5gc-mongodb image
          ignore_errors: true
          shell:  |
                docker image rm {{ free5gc_mongodb_image_name }}
          when: force_docker_reinstall == 'true'

        - name  : Remove enb-openairsim image
          ignore_errors: true
          shell:  |
                docker image rm {{ oaisim_ue_image_name }}
          when: force_docker_reinstall == 'true'

        - name  : Remove ue-openairsim image
          ignore_errors: true
          shell:  |
                docker image rm {{ oaisim_enb_image_name }}
          when: force_docker_reinstall == 'true'

        - name  : Remove free5gc-webui image
          ignore_errors: true
          shell:  |
                docker image rm {{ free5gc_webui_image_name }}
          when: force_docker_reinstall == 'true'

        - name  : Remove free5g docker custom network
          ignore_errors: true
          shell:  |
                docker network rm {{ docker_custom_network_name }}

        - name  : Create Docker custom network
          shell:  | 
                docker network create --subnet={{ docker_custom_subnet_network }} --driver bridge {{ docker_custom_network_name }}            
 
        - name  : Run free5gc MONGO-DB container
          shell:  |
                docker run -ti -d --net {{ docker_custom_network_name }} --ip {{ ip_address_MONGO_DB }} --name {{ MONGO_DB_container_name }} {{ free5gc_mongodb_image_name }} bash
          when  : deploy_free5gc == 'true'

        - name  : Run free5gc AMF container
          shell :  |
                docker run -ti -d --privileged --net {{ docker_custom_network_name }} --ip {{ ip_address_AMF }} --name {{ AMF_container_name }} {{ free5gc_st1_image_name }} bash 
          when  : deploy_free5gc == 'true'

        - name  : Run free5gc UPF container
          shell :  |
                docker run -ti -d --device=/dev/net/tun:/dev/net/tun --cap-add=NET_ADMIN --privileged --net {{ docker_custom_network_name }} --ip {{ ip_address_UPF }} --name {{ UPF_container_name }} {{ free5gc_st1_image_name }} bash 
          when  : deploy_free5gc == 'true'

        - name  : Run free5gc SMF container
          shell:  |
                docker run -ti -d --privileged --net {{ docker_custom_network_name }} --ip {{ ip_address_SMF }} --name {{ SMF_container_name }} {{ free5gc_st1_image_name }} bash 
          when  : deploy_free5gc == 'true'

        - name  : Run free5gc HSS container
          shell:  |
                docker run -ti -d --privileged --net {{ docker_custom_network_name }} --ip {{ ip_address_HSS }} --name {{ HSS_container_name }} {{ free5gc_st1_image_name }} bash 
          when  : deploy_free5gc == 'true'

        - name  : Run free5gc PCRF container
          shell:  |
                docker run -ti -d --privileged --net {{ docker_custom_network_name }} --ip {{ ip_address_PCRF }} --name {{ PCRF_container_name }} {{ free5gc_st1_image_name }} bash 
          when  : deploy_free5gc == 'true'

        - name  : Run free5gc WEBUI container
          shell :  |
                docker run -ti -d -p {{ web_application_access_port }}:3000 --net {{ docker_custom_network_name }} --ip {{ ip_address_WEB_UI }} --name {{ WEB_UI_container_name }} {{ free5gc_webui_image_name }} bash
          when  : deploy_free5gc == 'true'

        - name  : Run OpenAirSIM-enB container
          shell :  |
                docker run -ti -d --cap-add=NET_ADMIN --privileged --net {{ docker_custom_network_name }} --ip {{ ip_address_OAISIM_ENB }} --name {{ ENB_container_name }} {{ oaisim_enb_image_name }} bash 
          when  : deploy_oaisim == 'true'

        - name  : Run OpenAirSIM-UE container
          shell :  |
                docker run -ti -d --cap-add=NET_ADMIN --privileged --net {{ docker_custom_network_name }} --ip {{ ip_address_OAISIM_UE }} --name {{ UE_container_name }} {{ oaisim_ue_image_name }} bash 
          when  : deploy_oaisim == 'true'
                
        - name  : Build enB rcc.band7.tm1.nfapi.conf file 1/3 
          shell : |
                docker exec {{ ENB_container_name }} /bin/sh -c "rm enb/ci-scripts/conf_files/rcc.band7.tm1.nfapi.conf"
          when  : deploy_oaisim == 'true'

        - name  : Build enB rcc.band7.tm1.nfapi.conf file 2/3
          copy  :
            dest: "{{ BASE_DIR_INSTALL }}/rcc.band7.tm1.nfapi.conf"
            content: |
                Active_eNBs = ( "Carleton University Ansible Deployment Project Group - Ottawa Canada");
                # Asn1_verbosity, choice in: none, info, annoying
                Asn1_verbosity = "none";

                eNBs =
                (
                {
                    ////////// Identification parameters:
                    eNB_ID    =  0xe00;

                    cell_type =  "CELL_MICRO_ENB";

                    eNB_name  =  "Carleton University Ansible Deployment Project Group - Ottawa Canada";

                    // Tracking area code, 0x0000 and 0xfffe are reserved values
                    tracking_area_code = 1;

                    plmn_list = ( { mcc = 302; mnc = 34; mnc_length = 2; } );

                    tr_s_preference     = "local_mac"

                    ////////// Physical parameters:

                    component_carriers = (
                    {
                    node_function                       = "3GPP_eNODEB";
                    node_timing                         = "synch_to_ext_device";
                    node_synch_ref                      = 0;
                    frame_type					                = "FDD";
                    tdd_config 					                = 3;
                    tdd_config_s            			      = 0;
                    prefix_type             			      = "NORMAL";
                    eutra_band              			      = 7;
                    downlink_frequency      			      = 2685000000L;
                    uplink_frequency_offset 			      = -120000000;
                    Nid_cell					                  = 0;
                    N_RB_DL                 			      = 50;
                    Nid_cell_mbsfn          			      = 0;
                    nb_antenna_ports                    = 1;
                    nb_antennas_tx          			      = 2;
                    nb_antennas_rx          			      = 2;
                    tx_gain                             = 90;
                    rx_gain                             = 125;
                    pbch_repetition                     = "FALSE";
                    prach_root              			      = 0;
                    prach_config_index      			      = 0;
                    prach_high_speed        			      = "DISABLE";
                    prach_zero_correlation  			      = 1;
                    prach_freq_offset       			      = 2;
                    pucch_delta_shift       			      = 1;
                    pucch_nRB_CQI           			      = 0;
                    pucch_nCS_AN            			      = 0;
                    pucch_n1_AN             			      = 0;
                    pdsch_referenceSignalPower 			    = -27;
                    pdsch_p_b                  			    = 0;
                    pusch_n_SB                 			    = 1;
                    pusch_enable64QAM          			    = "DISABLE";
                    pusch_hoppingMode                   = "interSubFrame";
                    pusch_hoppingOffset                 = 0;
                    pusch_groupHoppingEnabled  			    = "ENABLE";
                    pusch_groupAssignment      			    = 0;
                    pusch_sequenceHoppingEnabled		   	= "DISABLE";
                    pusch_nDMRS1                        = 1;
                    phich_duration                      = "NORMAL";
                    phich_resource                      = "ONESIXTH";
                    srs_enable                          = "DISABLE";
                    /*  srs_BandwidthConfig             =;
                    srs_SubframeConfig                  =;
                    srs_ackNackST                       =;
                    srs_MaxUpPts                        =;*/

                    pusch_p0_Nominal                    = -96;
                    pusch_alpha                         = "AL1";
                    pucch_p0_Nominal                    = -104;
                    msg3_delta_Preamble                 = 6;
                    pucch_deltaF_Format1                = "deltaF2";
                    pucch_deltaF_Format1b               = "deltaF3";
                    pucch_deltaF_Format2                = "deltaF0";
                    pucch_deltaF_Format2a               = "deltaF0";
                    pucch_deltaF_Format2b		    	      = "deltaF0";

                    rach_numberOfRA_Preambles           = 64;
                    rach_preamblesGroupAConfig          = "DISABLE";
                    /*
                    rach_sizeOfRA_PreamblesGroupA       = ;
                    rach_messageSizeGroupA              = ;
                    rach_messagePowerOffsetGroupB       = ;
                    */
                    rach_powerRampingStep                       = 4;
                    rach_preambleInitialReceivedTargetPower     = -108;
                    rach_preambleTransMax                       = 10;
                    rach_raResponseWindowSize                   = 10;
                    rach_macContentionResolutionTimer           = 48;
                    rach_maxHARQ_Msg3Tx                         = 4;
